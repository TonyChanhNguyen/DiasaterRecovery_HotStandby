[
{
	"uri": "/",
	"title": "Hot Standby",
	"tags": [],
	"description": "",
	"content": "Hot Standby In this module, you will go through the Hot Standby disaster recovery strategy. Hot Standby disaster recovery strategy has Recovery Point Objective(RPO) / Recovery Time Objective (RTO) in almost real time. For the hot standby strategy secondary region, the data is live, core infrastructure is provisioned and the services are running at full production capacity.\nYour application is currently deployed in the primary region N. Virginia (us-east-1). Oregon (us-west-2) will be your secondary region.\nYour test application is Unishop. It is a Spring Boot Java application deployed on a single Amazon Elastic Compute Cloud (EC2) instance using a public subnet. Your datastore is an Amazon Aurora MySQL database which has user data. Your test application is also deployed using Amazon API Gateway and AWS Lambda . Your datastore is Amazon DynamoDB which has shopping cart data. The frontend is written using bootstrap and hosted in Amazon Simple Storage Service (S3) .\nYour test application is using two datastores, Amazon Aurora and Amazon DynamoDB to showcase the Disaster Recovery features of each. You are using Amazon DynamoDB to store the state of the shopping cart and you are using Amazon Aurora to store the unicorn product catalog. When you initiate failover, for the Amazon Aurora database you will not need to promote the read replica in the recovery region since you are only reading the product catalog. This can decrease recovery time since no database promotion is necessary. In the failover case of Amazon DynamoDB you have configured Global Tables which allows for multiple writers so no action is needed. For your workloads, you would choose the right datastore for your use case.\nThis module takes advantage of Amazon CloudFront which you will use as your content delivery network. You are also taking advantage of Amazon Aurora Global Database to replicate your Amazon Aurora MySQL data to your secondary region and Amazon DynamoDB Global Tables to replicate your DynamoDB data to your secondary region.\nCloudFormation will be used to configure the infrastructure and deploy the application. Provisioning your infrastructure with infrastructure as code (IaC) methodologies is a best practice. CloudFormation is an easy way to speed up cloud provisioning with infrastructure as code.\n"
},
{
	"uri": "/1.introduce/",
	"title": "Introduce",
	"tags": [],
	"description": "",
	"content": "Overview In this module, you will go through the Hot Standby disaster recovery strategy. Hot Standby disaster recovery strategy has Recovery Point Objective(RPO) / Recovery Time Objective (RTO) in almost real time. For the hot standby strategy secondary region, the data is live, core infrastructure is provisioned and the services are running at full production capacity.\nYour application is currently deployed in the primary region N. Virginia (us-east-1). Oregon (us-west-2) will be your secondary region.\nYour test application is Unishop. It is a Spring Boot Java application deployed on a single Amazon Elastic Compute Cloud (EC2) instance using a public subnet. Your datastore is an Amazon Aurora MySQL database which has user data. Your test application is also deployed using Amazon API Gateway and AWS Lambda . Your datastore is Amazon DynamoDB which has shopping cart data. The frontend is written using bootstrap and hosted in Amazon Simple Storage Service (S3) .\nYour test application is using two datastores, Amazon Aurora and Amazon DynamoDB to showcase the Disaster Recovery features of each. You are using Amazon DynamoDB to store the state of the shopping cart and you are using Amazon Aurora to store the unicorn product catalog. When you initiate failover, for the Amazon Aurora database you will not need to promote the read replica in the recovery region since you are only reading the product catalog. This can decrease recovery time since no database promotion is necessary. In the failover case of Amazon DynamoDB you have configured Global Tables which allows for multiple writers so no action is needed. For your workloads, you would choose the right datastore for your use case.\nThis module takes advantage of Amazon CloudFront which you will use as your content delivery network. You are also taking advantage of Amazon Aurora Global Database to replicate your Amazon Aurora MySQL data to your secondary region and Amazon DynamoDB Global Tables to replicate your DynamoDB data to your secondary region.\nCloudFormation will be used to configure the infrastructure and deploy the application. Provisioning your infrastructure with infrastructure as code (IaC) methodologies is a best practice. CloudFormation is an easy way to speed up cloud provisioning with infrastructure as code.\nContent  Introduce Preparation  2.1 S3 access 2.2 Primary region 2.3 Secondary region 2.4 Amazon DynamoDB 2.5 Verify website   CloudFront Failover Verify failover Cleanup resources  "
},
{
	"uri": "/2.preparation/2.1.s3access/",
	"title": "S3 access ",
	"tags": [],
	"description": "",
	"content": "Your application employs AWS Simple Storage Service (S3) Static website hosting. To make the application available to Internet users, you must disable the AWS account policy that blocks public access.\n Click S3 to navigate to the dashboard. Select feature Block Public Access settings for this account.  If you see that Block public access is On, click on Edit button.  If you see that Block public access is Off, you can skip this step and to go Primary region.\n\r Uncheck Block all public access.\n  Then, click on save changes.   Input confirm, then click on Confirm to save your changes.   Your changes had been updated successfully.   "
},
{
	"uri": "/2.preparation/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "Content  2.1 S3 access 2.2 Primary region 2.3 Secondary region 2.4 Amazon DynamoDB 2.5 Verify website  "
},
{
	"uri": "/2.preparation/2.2.primaryregion/",
	"title": "Primary region",
	"tags": [],
	"description": "",
	"content": "Deploy Network Configuration using Amazon CloudFormation Templates   Create Network Infrastructure in primary region N. Virginia (us-east-1) by launching this CloudFormation Template.\n  At CloudFormation interface, click on Next.   At Specify stack details interface, input stack name network-stack.\n  Then, click on Next.   At Configure stack options interface. Scroll down and click on Next.   At Review network-stack interface. Scroll down and click on Submit.   Your network stack is creating.   After a minute, your stack will be created successfully.   Deploy Application   Create application in primary region N. Virginia (us-east-1) by launching this CloudFormation Template.\n  At Create stack interface, click on Next.   At Specify stack details interface, input hot-primary as Stack name.\n  At Parameter section:\n Keep yes at IsPrimary (default). Keep /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 at LatestAmiId (default). Keep network-stack at NetworkStackName (default), unless you\u0026rsquo;ve changed it in the previous step.    Then, click on Next.   At Configure stack options interface, scroll down and click on Next.   At Review hot-primary interface, scroll down to the end of page. Then, check on I acknowledge that AWS CloudFormation might create IAM resources with custom names. box.\n  Click on Next.   Your application stack is creating. It will take you about 15 minutes to finish.   After about 15 minutes, your stack had been created successfully.   "
},
{
	"uri": "/3.cloudfront/",
	"title": "CloudFront",
	"tags": [],
	"description": "",
	"content": "You can improve resiliency and increase availability for specific scenarios by setting up CloudFront with origin failover.\nCreate the Amazon CloudFront Distribution   Go to CloudFront.\n  Click the Create a CloudFront Distribution button.   Select hot-primary-uibucket-xxx at Origin domain.\n  Click on Use website endpoint.   Scroll down to Cache key and origin requests feature.\n  Select CachingDisabled as Cache policy.   One of the purposes of using CloudFront is to reduce the number of requests that your origin server must respond to directly. With CloudFront caching, more objects are served from CloudFront edge locations, which are closer to your users. This reduces the load on your origin server and reduces latency. However, that behavior masks your mechanism (disabling the UI bucket) from properly simulating an outage.\n\rAt Web Application Firewall (WAF) section, select Do not enable security protections.   Best practice to keep your application secure from the most common web threats and security vulnerabilities using AWS WAF is to select Enable security protections. Blocked requests are stopped before they reach your web servers.\n\rScroll down to the end of page and click the Create distribution button.   Configure an Additional Origin You will now add an additional Origin and use your hot-secondary-uibucket-xxxx.\n  Click the Origins tab.\n  Click the Create origin button.   Select hot-secondary-uibucket-xxx at Origin domain.\n  Click the Use website endpoint button.   Scroll down to the end of page and click the Create origin button.   Configure the Origin Group   Click on Create Origin Group button.   At Origins section, select hot-primary-uibucket-xxxx and then click on Add.   Repeat above step with hot-secondary-uibucket-xxxx.   Input hot-standby-origin-group as Name\n  Enable all checkboxes of Failover criteria feature.\n  Then, click on Create origin group.   Configure Behaviors   Click the Behaviors tab.\n  Select Default (*).\n  Then, click the Edit button.   Select hot-standby-origin-group as the Origin and Origin Groups.   Scroll down to the end of page and click the Save changes button.   Click the Distributions link.   Wait for Status to be Enabled and for Last Modified to have a date.   Verify the Distribution   Copy the CloudFront Distribution\u0026rsquo;s Domain Name into a new browser window.   Confirm that the website\u0026rsquo;s header says The Unicorn Shop - us-east-1 and quantity of Cart Shop same as before after you log in successfully.   One of the purposes of using CloudFront is to support HTTPS, hosting a static website in S3 does not support this protocol. You should use best practices when hosting a static website on AWS which is to use CloudFront.\n\r"
},
{
	"uri": "/2.preparation/2.3.secondaryregion/",
	"title": "Secondary region",
	"tags": [],
	"description": "",
	"content": "Deploy Network Configuration using Amazon CloudFormation Templates   Create Network Infrastructure in secondary region Oregon (us-west-2) by launching this CloudFormation Template.\n  At CloudFormation interface, click on Next.   At Specify stack details interface, input stack name network-stack.\n  Then, click on Next.   At Configure stack options interface. Scroll down and click on Next.   At Review network-stack interface. Scroll down and click on Submit.   Your network stack is creating.   After a minute, your stack will be created successfully.   Deploy Application   Create the application in the secondary region Oregon (us-west-2) by launching CloudFormation Template.\n  At Create stack interface, click on Next.   At Specify stack details interface, input hot-secondary as Stack name.\n  At Parameter section:\n Change no at IsPrimary. Keep /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 at LatestAmiId (default). Keep network-stack at NetworkStackName (default), unless you\u0026rsquo;ve changed it in the previous step.    Then, click on Next.   At Configure stack options interface, scroll down and click on Next.   At Review hot-secondary interface, scroll down to the end of page. Then, check on I acknowledge that AWS CloudFormation might create IAM resources with custom names. box.\n  Click on Next.   Your application stack is creating. It will take you about 15 minutes to finish.   After about 15 minutes, your stack had been created successfully.   "
},
{
	"uri": "/2.preparation/2.4.amazondynamodb/",
	"title": "Amazon DynamoDB ",
	"tags": [],
	"description": "",
	"content": "When you create a DynamoDB global table , it consists of multiple replica tables (one per AWS Region) that DynamoDB treats as a single unit. Every replica has the same table name and the same primary key schema. When an application writes data to a replica table in one AWS region, DynamoDB propagates the write to the other replica tables in the other AWS regions automatically.\n  Click DynamoDB Tables to navigate to the dashboard in the N. Virginia (us-east-1) regions.\n  Click on unishophotstandby table.   Click on Global Tables tab.\n  Click on Create replica button.   Select US West (Oregon) at Available replication Regions.\n  Then, click on Create replica.   Your replica is creating.   Wait for the status to show Active before moving on to the next step.\n\r"
},
{
	"uri": "/4.failover/",
	"title": "Failover",
	"tags": [],
	"description": "",
	"content": "When a regional service event affects the Unishop application in the primary region N. Virginia (us-east-1), we want to fail over to the secondary region Oregon (us-west-2).\nSimulating a Regional Service Event You will now simulate a regional service event affecting the Unishop website in N. Virginia (us-east-1). You are going to achieve this by blocking public access to the S3 bucket that is hosting the website making the Unishop website unavailable.\n  Go to S3.\n  Click on the bucket name hot-primary-uibucket-xxxxxxxxxxxx.   Click on Permissions tab.   In the Block public access (bucket settings) section, click on Edit.   Enable the Block all public access checkbox.\n  Then click the Save changes button.   Input confirm.\n  Click on Confirm to save your changes.   Click on Properties tab.   Scroll down to the Static website hosting section. Click on the Bucket website endpoint link.   You should get a 403 Forbidden error.   "
},
{
	"uri": "/5.verifyfailover/",
	"title": "Verify failover",
	"tags": [],
	"description": "",
	"content": "Your Amazon S3 bucket that hosts the Hot-Primary website is now inaccessible. When CloudFront attempts to route the user’s request to the primary region, it will receive an HTTP 403 status error (Forbidden) just like you did. The CloudFront Distribution will automatically handle this scenario by failing over to the Hot-Secondary region.\nIf you go back and refresh your browser (using the CloudFront Distribution’s Domain Name from before), you should now see The Unicorn Shop - us-west-2 website. The user’s session should still be active, and their cart still contains the products previously added.\n  Go to CloudFront Distributions.\n  Copy the Domain name into a new browser window.   Confirm that the website\u0026rsquo;s header says The Unicorn Shop - us-west-2 and quantity of Cart Shop same as before after you log in successfully.   Congratulations, your website had been done failover to Secondary Region Oregon (us-west-2) from Primary Region N. Virginia (us-east-1) successfully. "
},
{
	"uri": "/2.preparation/2.5.verifywebsite/",
	"title": "Verify website",
	"tags": [],
	"description": "",
	"content": "Primary Region   Click CloudFormation Stacks to navigate to the dashboard in N. Virginia (us-east-1) region.\n  Choose the hot-primary stack.\n  Click the Output link.   Click on the WebsiteURL output link and open in a new browser tab or window.   At web page, click on Sign up to register account.   Fill needed information to sign up account.\n  Then, click on Signup to finish this step.\n  \rKeep remember information which you provided for this step.\n\r Click on Log in.   Fill information which you provided.\n  Then, click on Login.   After log in successfully, click to Unicorn item you want. Then click on Add to cart to add it into your cart.   After you add Unicorn item to cart successfully, check Cart icon to see the quantity was increased.   Repeat step 12 to add more items to your cart.   After finish those steps. Save the quantity of your cart and its region. We will verify them again after performing replicate website into secondary region.\n  \rIn my situation, the quantity of cart is 8 and region is us-east-1 (Primary region).\n\rSecondary Region You are taking advantage of Amazon DynamoDB global tables. A global table is a collection of one or more replica tables, all owned by a single AWS account. A replica table (or replica, for short) is a single DynamoDB table that functions as a part of a global table. Each replica stores the same set of data items.\n  Go to CloudFormation Stacks in region Oregon (us-west-2).\n  Choose the hot-secondary stack.\n  Click the Outputs link.   Click on the WebsiteURL output link and open in a new browser tab or window.   At web page you can see the region now is us-west-2, then click on Log in.   Fill need information that you created at Primary region N. Virginia (us-east-1).\n  Click on Log in.   You should see the same number of items in your cart that you added at Primary region N. Virginia (us-east-1).   Lets add more items to the cart.   At this time, the quantity of cart is 10 and region is us-west-2 (Secondary region).\n\rBack to web page of Primary region N. Virginia (us-east-1) and see the cart. The quantity of cart now is 10, same as at Secondary region Oregon (us-west-2).   "
},
{
	"uri": "/6.cleanupresources/",
	"title": "Cleanup resources",
	"tags": [],
	"description": "",
	"content": "S3 Cleanup   Go to S3.\n  Select the hot-primary-uibucket-xxxx.\n  Click Empty.   Input permanently delete.\n  Then, click on Empty.   Repeat those steps for buckets:\n hot-primary-assetbucket-xxxx. hot-secondary-uibucket-xxxx. hot-secondary-assetbucket-xxxx.    Amazon DynamoDB Cleanup   Go to Amazon DynamoDB at region N. Virginia (us-east-1).\n  Click on Tables tab.\n  Click on unishophotstandby table.   Click the Global Tables tab.   Select US West (Oregon) replica.\n  Click on Delete replica.   Input delete to confirm.\n  Then, click on Delete.   CloudFront Cleanup   Go to CloudFront Distributions.\n  Select distributions had created.\n  Click on Disable.   Click on Disable.   Wait for Status to be Disabled and for Last Modified to have a date.   Then, select it again.\n  Click on Delete.   Click on Delete.   Database Cleanup Secondary region   Go to RDS in Oregon (us-west-2) region.\n  Select unishop-hot database under hot-secondary cluster.\n  Click on Action.\n  Then click on Delete.   Enter delete me.\n  Click on Delete.   After unishop-hot database was deleted, select hot-secondary cluster.\n  Click on Actions.\n  Click on Remove from global database.   Click Remove and promote.   After remove from global database, select hot-secondary cluster.\n  Click on Actions.\n  Click on Delete.   Uncheck Create final snapshot box.\n  Check I acknowledge that upon instance\u0026hellip; box.\n  Input delete me.\n  Then, click on Delete DB sluster.   Primary region  Go to RDS in N. Virginia (us-east-1) region. Repeat all above steps to delete unishop-hot database first, then delete hot-primary cluster.  After databases and clusters were deleted, now we will delete Global database.\n Select hot-global.\n  Click on Actions.\n  Click on Delete.   Input delete me.\n  Click on Delete.   CloudFormation Secondary Region Cleanup   Go to CloudFormation stacks in the Oregon (us-west-2) region.\n  Select stack name hot-secondary.\n  Then click on Delete.   Click on Delete to confirm.   After stack hot-secondary was deleted, select stack name network-stack.\n  Then click on Delete.   Click on Delete to confirm.   CloudFormation Primary Region Cleanup   Go to CloudFormation stacks in the N. Virginia (us-east-1) region.\n  Repeat these steps to delete stack name hot-primary first, then delete stack name network-stack.\n  Congratulations, you had finished this workshop! "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]